Here's a comprehensive guide for testing the API endpoints using curl commands:

```bash
# 1. Basic Book Operations

# Add a new book
curl -X POST http://localhost:5000/books/add \
-H "Content-Type: application/json" \
-d '{
    "name": "The Great Gatsby",
    "author_name": "F. Scott Fitzgerald",
    "books_id": 1,
    "category": "Classic Fiction",
    "description": "A story of the American Dream"
}'

# Get all books
curl http://localhost:5000/books

# Get specific book
curl http://localhost:5000/books/1

# Update a book
curl -X PUT http://localhost:5000/books/update/1 \
-H "Content-Type: application/json" \
-d '{
    "name": "The Greater Gatsby",
    "description": "Updated description"
}'

# Delete a book
curl -X DELETE http://localhost:5000/books/delete/1

# 2. Static Resource Operations

# Add static resources for a book
curl -X POST http://localhost:5000/books/static/add/1 \
-H "Content-Type: application/json" \
-d '{
    "picture_url": "https://example.com/gatsby.jpg",
    "download_url": "https://example.com/gatsby.pdf"
}'

# Get static resources for a book
curl http://localhost:5000/books/static/1

# Update static resources
curl -X PUT http://localhost:5000/books/static/update/1 \
-H "Content-Type: application/json" \
-d '{
    "picture_url": "https://example.com/new_gatsby.jpg"
}'

# Delete static resources
curl -X DELETE http://localhost:5000/books/static/delete/1

# 3. Complete Examples with Different Scenarios

# Add a book with static resources in one request
curl -X POST http://localhost:5000/books/add \
-H "Content-Type: application/json" \
-d '{
    "name": "1984",
    "author_name": "George Orwell",
    "books_id": 2,
    "category": "Dystopian Fiction",
    "description": "A dystopian social science fiction",
    "picture_url": "https://example.com/1984.jpg",
    "download_url": "https://example.com/1984.pdf"
}'

# Update both book and static resources
curl -X PUT http://localhost:5000/books/update/2 \
-H "Content-Type: application/json" \
-d '{
    "description": "Classic dystopian novel",
    "picture_url": "https://example.com/1984_new.jpg",
    "download_url": "https://example.com/1984_new.pdf"
}'

# 4. Testing Error Cases

# Try to add a book with duplicate ID
curl -X POST http://localhost:5000/books/add \
-H "Content-Type: application/json" \
-d '{
    "name": "Duplicate Book",
    "author_name": "Some Author",
    "books_id": 1,
    "category": "Fiction"
}'

# Try to get non-existent book
curl http://localhost:5000/books/999

# Try to add static resources without required book_id
curl -X POST http://localhost:5000/books/add \
-H "Content-Type: application/json" \
-d '{
    "name": "Invalid Book",
    "author_name": "Author"
}'

# 5. Batch Operations Example

# Add multiple books in sequence
for i in {1..3}; do
    curl -X POST http://localhost:5000/books/add \
    -H "Content-Type: application/json" \
    -d "{
        \"name\": \"Book $i\",
        \"author_name\": \"Author $i\",
        \"books_id\": $i,
        \"category\": \"Category $i\"
    }"
done

# 6. Windows CMD Specific Commands
# Note: For Windows CMD, use double quotes instead of single quotes

# Add a book (Windows CMD version)
curl -X POST http://localhost:5000/books/add ^
-H "Content-Type: application/json" ^
-d "{\"name\": \"Windows Book\", \"author_name\": \"Windows Author\", \"books_id\": 1}"

# 7. PowerShell Specific Commands

# Add a book (PowerShell version)
curl -X POST http://localhost:5000/books/add `
-H "Content-Type: application/json" `
-d '{\"name\": \"PowerShell Book\", \"author_name\": \"PowerShell Author\", \"books_id\": 1}'
```

Additional Tips:

1. For Windows users:
   - Replace single quotes (`'`) with double quotes (`"`)
   - Use `^` instead of `\` for line continuation in CMD
   - Use `` ` `` (backtick) for line continuation in PowerShell

2. For testing responses:
   - Add `-v` flag to see detailed request/response information
   - Example: `curl -v http://localhost:5000/books/1`

3. For saving output:
   - Use `-o` flag to save response to a file
   - Example: `curl http://localhost:5000/books -o books.json`

4. For testing with SSL/TLS:
   - Add `-k` flag to allow insecure connections
   - Example: `curl -k https://localhost:5000/books`

5. For debugging:
   - Use `-i` flag to include response headers
   - Use `-I` flag to show only headers
   - Example: `curl -i http://localhost:5000/books/1`

Remember to:
- Start your Flask application before running these commands
- Replace `localhost:5000` with your actual server address if different
- Ensure proper JSON formatting in the data payloads
- Check the response status codes and messages for proper error handling
